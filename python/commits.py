"""[TASK] Commits  #5."""

# 1. Опишите своими словами назначение каждого из этих типов коммитов:
# - feat, fix, docs, style, refactor, test, build, ci, perf, chore.
# - feat — новая функциональность.
# - fix — исправление ошибки.
# - docs — изменения в документации.
# - style — форматирование, отступы, без логических изменений.
# - refactor — изменение структуры кода без изменения поведения.
# - test — добавление или изменение тестов.
# - build — изменения, влияющие на сборку или зависимости.
# - ci — изменения в конфигурации CI/CD.
# - perf — оптимизация производительности.
# - chore — рутинные задачи, не влияющие на код.
#
# 2. Представьте, что вы исправили баг в функции, которая некорректно округляет числа. Сделайте фиктивный коммит и напишите для него сообщение в соответствии с Conventional Commits (используя тип fix).
# - `git commit -m "fix: корректное округление чисел в функции CalculateAverage"`
#
# 3. Добавление новой функциональности:
# Допустим, вы реализовали новую функцию generateReport в проекте. Сделайте фиктивный коммит с типом feat, отражающий добавление этой функциональности
# - `git commit -m "feat: добавлена функция generateReport для формирования отчётов"`
#
# 4. Модификация формата кода или стилей:
# Представьте, что вы поправили отступы и форматирование во всём проекте, не меняя логики кода. Сделайте фиктивный коммит с типом style
# - `git commit -m "style: исправлены отступы и форматирование кода по всему проекту"`
#
# 5. Документация и тестирование:
# 5.1 Сделайте фиктивный коммит с типом docs, добавляющий или улучшающий документацию для вашей новой функции.
# - `git commit -m "docs: добавлено описание функции generateReport в README"`
#
# 5.2 Сделайте фиктивный коммит с типом test, добавляющий тесты для этой же функции.
# - `git commit -m "test: добавлены тесты для функции generateReport"`
