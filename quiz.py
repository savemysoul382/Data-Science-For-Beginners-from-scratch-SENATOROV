"""16.09.2025."""

# 1) Как понять, что домашка пришла?
#    0:16 Ветка в телеграмм Homework + мой ник из гитхаба + прими пул.
# 2) Как принять домашку?
#    0:22 в кошечке, фетч ориджин, комиты в хистори.
# 3) Зачем нужна кнопка history и какие функции появляются
# при нажатии правой кнопки мыши на коммит?"
#     3:48 свежие коммиты,
#     - reset to commit
#     - checkout commit
#     - reorder commit
#     - revert changes in commit
#     - create branch from commit
#     - create tag
#     - cherry-pick commit
#     - copy sha
#     - copy tag
#     - view on github
# 3.1) Где брать ссылку на коммит? куда её отправлять?
#     3:56 в github на сайте в адресной строке,
#     отпарвляем в чатик телеграм.
# 4) Что такое файл лога?
#     в нём пишем что сделали по домашке.
# 4.1) Когда нужно его пушить?
#     в дни сдачи домашних работ (пн,ср,птн).
# 5) Что такое интерпретатор?
#     2:48 программа, которая читает и запускает наш код.
# 6) Где можно выбрать интерпретатор?
#     2:51 на кнопке play в ячейке vs code
#     либо на кнопке в правой части меню над ячейками.
# 7) Что такое модуль?
#     сам файл с кодом?
# 8) Как создать и отправить коммит?
#     3:26 в кошке, пишем что сделали, commit to main.
# 9) Как посмотреть что коммит точно отправлен и находится в github?
#     3:48 в history, View on github и просмотр на сайте гитхаба коммита
# 10)  Какая команда показывает что код не прошёл проверки на ошибки?
#     6:05 pre-commit run --all-files.
# 10.1) Напишите список линтеров которые используются для проверки
# кода и дайте их краткую характеристику.
#     6:08 (ИЗ ВИДЕО)
#     - docformatter
#     - Add trailing commas
#     - black
#     - nbqa-black
#     - pyupgrade
#     - isort
#     - blacken-docs
#     - nbqu-pyupgrade
#     - nbqu-isort
#     - trim trailing whitespace
#     (ПОСЛЕДНИЕ ИЗ РЕПОЗИТОРИЯ)
# - jupytext — синхронизирует Jupyter Notebooks с текстовыми файлами
# -  (например, .py или .md).
# - docformatter — автоматически форматирует docstring-и
#   в Python коде.
# - black — автоформаттер Python кода по строгому стилю.
# - nbqa-black — применяет black к Jupyter Notebook.
# - pyupgrade — обновляет синтаксис Python кода до современного
#   (убирает устаревшие конструкции).
# - isort — сортирует и упорядочивает импорты.
# - nbqa-blacken-docs — применяет форматирование примеров кода в
#   документации внутри      Jupyter Notebook.
# - nbqa-pyupgrade — запускает pyupgrade на Jupyter Notebook.
# - nbqa-isort — запускает isort на Jupyter Notebook.
# - codespell — ищет и исправляет опечатки в коде и документации.
# - nbqa-flake8 — запускает flake8 (линтер) на Jupyter Notebook.
# - flake8 — линтер: ищет ошибки стиля и потенциальные баги в
#   Python коде.
# - nbqa-mypy — запускает mypy (проверку типов) на Jupyter Notebook.
# - mypy — статический анализатор типов для Python.
# - nbqa-pylint — запускает pylint на Jupyter Notebook.
# - pylint — строгий линтер и анализатор качества кода.
# - nbqa-pydocstyle — проверяет docstring-и в Jupyter Notebook
#   на соответствие стандарту.
# 11)   Как узнать какой именно линтер не прошёл проверку?
#     6:27 в терминале будет напротив имени линтера красное Failed.
# 12)   Линтер Pylint видит markdown?
#     7:10 не видит.
# 13)   Номер ячейки в терминале и номер ячейки в vs code может отличаться?
#      в каком случае?
#     может, когда ячейка идёт после маркдаун-ячейки.
# 14)  Где посмотреть номер ячейки в vscode?
#     6:42 справа внизу vs code в панельке.
# 15)  В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
#     в формате json.
# 16)  Где посмотреть в какой ячейке ошибка?
#     в логе терминала.
# 17)  Как запустить терминал?
#     ctrl+`, или View -> Terminal.
# 18)  Что такое линтер?
#       Линтер — это инструмент, который анализирует код без его запуска
#       и сообщает о:
#       - ошибках стиля (например, пробелы, длина строки, имена переменных),
#       - потенциальных ошибках (неиспользуемые переменные, дублирование кода),
#       - нарушениях правил написания кода
# 19)  В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
#     https://pylint.readthedocs.io/en/stable/
# 20) Секция pydocstyle в большинстве случае автоматический закрывается
#     после исправления ошибок в каком линтере?
#     pylint.
# 21) Что такое описание модуля? Оно должно отражать информацию о том
#      что находится в модуле?
#      - 9:27 какая информация в модуле, должен отражать
#        информацию о том что находится в модуле.
# 21.1) С какой  git команды начинается утро программиста?
#          - Fetch origin? Pull origin.
# 1)    После внесения изменений в файлах, кнопка open in vs code пропадает
#      в кошке, как по другому открыть vs code из кошки?
#         - 14:20 в кошке на имени репозитория правой кнопкой мыши и
#         Open in Visual Studio Code.
# 2)   Что такое stash? Общее объяснение концепции.
#     - стэш - это буфер куда мы временно прячем файлы, чтобы принять pull.
# 23.1) Как сохранить стэш?
#       git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#         - git stash save "NAME_STASH".
#       Кнопка в vs code:
#         - вверху на панели в модуле GIT, кнопка со стрекой
#           Stash all changes.
# 23.2) Как восстановить стэш
#       (подсказка: https://t.me/c/1937296927/3602/25747)?:
#         - в кошке внизу Stashed Changes -> View Stash ->
#           выбираем из списка -> Restore.
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#         - git stash apply "NUMBER_STASH".
# 23.3) Различие между стэшем и коммитом.
#       Когда лучше сохранить изменения в стэше, а когда коммитить.
#         - Стэш позволяет сохранить изменения в репозитории на диске,
#         - а коммит позволяет сохранить изменения в репозитории
#           на диске и отправить их в гитхаб.
#         - Коммит - фиксирует изменения навсегда в истории проекта.
#         - Стэш - временно откладывает изменения локально,
#           чтобы вернуться к ним позже.
# 23.4) Как просмотреть список сохраненных стэшей?
#         - git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#         - git stash list.
# 23.5) Как удалить стэш?
#       Команды для удаления отдельных стэшей или всех сразу.
#       git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#         - git stash drop, git stash clear.
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
#     - Если мы работаем в одном файле и приняли pull с файлом,
#       с которым работали и мы, чтобы решить конфликты слияния.
#     - чтобы сохранить текущую работу временно и переключиться на
#       другую ветку для быстрого фикса какой-то проблемы и вернуться
#       обратно к своей работе.
# 1)   Где посмотреть что есть конфликт в файлах?
#     - 16:12 в кошке во вкладке changes, будет восклицательный знак на файле.
# 24.1) Когда он появляется?
#     Когда были изменения в одном и том же файле.
# 1)   Как решить конфликт в файлах?
#     - в кошке на файле с конфликтом правой кнопкой мыши и
#       Open in Visual Studio Code.
# 2)   Напишиие правильное утверждение
#       -Зелёное то что пришло с гитхаба и синее локальные изменения
#        или синее то что пришло с гитхаба и зелёное это локальные изменения
#     - Зелёное то что пришло с гитхаба и синее локальные изменения
# 3)   Если мы работаем в одном файле, можно ли принять pull
#     после того как вы спрячете в стэш свои изменения?
#      - да.
# 27.1) Что может произойти когда stash восстановите после принятия pull?
#       - конфликт в файлах.
# 1)    Сколько способов решения конфликтов было показано в видео?
#      Напишите ЧИСЛО и укажите их способы.
#         1 - Accept Current Change.
#         2 - Accept Incoming Change.
#         3 - Accept Both Changes.
#         4 - руками самому.
# 2)   Что делает кнопка complete merge?
#     применяет ваше решениие/имзенение по конфликту к файлу.
# 3)   В какой чат нужно писать если остались вопросы?
#     HELP ME.
# 4)   Что такое FORK? Зачем его делают?
#     19:05 скопировать репозиторий и сделать его личным.
#     чтобы внести вклад в разработку или помочь.
# 5)   Как скачать форкнутый репозиторий на локальный компьютер?
#     через кошку, clone repository.
# 6)   С какой вероятностью ваши ошибки были уже решены? и кто их решил?
#     с большой вероятностью, решили другие студенты или сам Руслан.
# 7)   Как создать файл в vs code?
#     ПКМ -> New File.
#     на имени репозитория меню -> иконка файла -> New File.
# 8)   Файл лога нужно заполнять в конце каждого урока?
#     да.
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
#   jupytext notebook.ipynb --to py
# 2) Что такое пакетный менеджер?
#    Вы пользуетесь пакетным менеджером conda или pip?
#    Какой лучше использовать для дата сайнс?
#     - Пакетный менеджер — это программа, которая устанавливает,
#       обновляет и управляет библиотеками и их зависимостями.
#     - pip
#     - conda
# 3) Почему расширение py лучше чем ipynb?
#     - код можно запускать из консоли или импортировать как модуль.
#     - проекты удобно хранить в Git
#       (чистый текст, хорошо читаются diff’ы).
#     - код проще тестировать, рефакторить и использовать в продакшене.
#     - нет "шума" от JSON-структуры, как в .ipynb.
# 4) Что такое pep8?
#    подсказка:https://peps.python.org/pep-0008/
#     - Style Guide for Python Code
# 4.1) линтеры проверяют на соблюдение pep8?
#      - да.
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#     - snake_case.
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
#      - может.
# 4.4) Зачем и где мы используем андерскор _
#      - пропустить значение.
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#     - допустима.
